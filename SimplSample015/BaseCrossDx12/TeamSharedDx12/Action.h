/*!
@file Action.h
@brief アクションコンポーネント
*/

#pragma once
#include "stdafx.h"

namespace basecross {

	//--------------------------------------------------------------------------------------
	///	アクション系コンポーネントの親クラス
	//--------------------------------------------------------------------------------------
	class ActionComponent : public Component {
		bool m_Run;			//移動中かどうか
		bool m_Arrived;	//到着したかどうか
		float m_TotalTime;	//移動にかける時間
		float m_NowTime;	//現在の時間
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit ActionComponent(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~ActionComponent();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Runフラグをセットする
		@param[in]	b	Runフラグ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRun(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	到着フラグをセットする
		@param[in]	b	到着フラグ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetArrived(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	NowTimeを加算して、TotalTimeと比較する
		@return	到着していればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool AdditionalNowTime();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		/*!
		@brief	実行中かどうかを得る
		@return	実行中ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsRun()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	実行中かどうかを得る
		@return	実行中ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetRun()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	到着したかどうかを得る
		@return	到着したらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsArrived()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	到着したかどうかを得る
		@return	到着したらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetArrived()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	トータル時間を得る
		@return	このアクションのトータル時間
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetTotalTime() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	トータル時間を設定する
		@param[in]	f	トータル時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetTotalTime(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在時間を得る
		@return	このアクションの現在時間
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetNowTime() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在時間を設定する
		@param[in]	f	現在時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetNowTime(float f);
		//操作
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アクションを実行する（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run() = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アクションを止める
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Stop();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アクションを再スタートする
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void ReStart();
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化を行う（仮想関数）<br />
		＊thisポインタが必要なオブジェクトはこの関数を多重定義して、取得できる
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate()override {};
		//--------------------------------------------------------------------------------------
		/*!
		@brief	描画、空関数（Drawは基本的に行わない）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override {}
	};

	//--------------------------------------------------------------------------------------
	///	アクションのインターバル（何もしないアクション）
	//--------------------------------------------------------------------------------------
	class ActionInterval : public  ActionComponent {
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit ActionInterval(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~ActionInterval();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	パラメータを設定する
		@param[in]	TotalTime	トータルタイム（何もしない時間）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アクションを実行する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
	};

	//--------------------------------------------------------------------------------------
	///	移動アクションの親クラス
	//--------------------------------------------------------------------------------------
	class MoveComponent : public ActionComponent {
		Vector3 m_StartPosition;	//開始地点
		Vector3 m_TargetPosition;	//目的地点
		Lerp::rate m_RateX;	//補間方法X
		Lerp::rate m_RateY;	//補間方法Y
		Lerp::rate m_RateZ;	//補間方法Z
		Vector3 m_Velocity;	//現在の速度
		void CalcVelocity();
		Vector3 CalcVelocitySub(float NowTime);
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit MoveComponent(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~MoveComponent();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		/*!
		@brief	X方向の補間方法を得る
		@return	補間方法
		*/
		//--------------------------------------------------------------------------------------
		Lerp::rate GetRateX() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Y方向の補間方法を得る
		@return	補間方法
		*/
		//--------------------------------------------------------------------------------------
		Lerp::rate GetRateY() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Z方向の補間方法を得る
		@return	補間方法
		*/
		//--------------------------------------------------------------------------------------
		Lerp::rate GetRateZ() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	X方向の補間方法を設定する
		@param[in]	r	補間方法
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateX(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Y方向の補間方法を設定する
		@param[in]	r	補間方法
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateY(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Z方向の補間方法を設定する
		@param[in]	r	補間方法
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateZ(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XYZ全方向の補間方法を同じに設定する
		@param[in]	r	補間方法
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateAll(const Lerp::rate r);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	XYZ全方向の補間方法を別々に設定する
		@param[in]	rX	補間方法X
		@param[in]	rY	補間方法Y
		@param[in]	rZ	補間方法Z
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRateAll(const Lerp::rate rX, const Lerp::rate rY, const Lerp::rate rZ);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	最初の位置を得る
		@return	最初の位置
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetStartPosition() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	最初の位置を設定する
		@param[in]	StartPosition	位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartPosition(const Vector3& StartPosition);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	最初の位置を設定する
		@param[in]	x	位置X
		@param[in]	y	位置Y
		@param[in]	z	位置Z
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStartPosition(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	目的の位置を得る
		@return	目的の位置
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetTargetPosition() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	目的の位置を設定する
		@param[in]	TargetPosition	位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetPosition(const Vector3& TargetPosition);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	目的の位置を設定する
		@param[in]	x	位置X
		@param[in]	y	位置Y
		@param[in]	z	位置Z
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTargetPosition(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在速度を計算して返す。<br />
		到着していたりRunしてなければ速度0を返す
		@return	現在速度
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetVelocity()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在位置を計算して返す。<br />
		タイムの更新は行わないのでUpdate後に呼ぶべき
		@return	現在速度
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetNowPosition() const;
		//操作
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アクションを実行する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
	};

	//--------------------------------------------------------------------------------------
	///	目的の位置に移動
	//--------------------------------------------------------------------------------------
	class MoveTo : public  MoveComponent {
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit MoveTo(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~MoveTo();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	パラメータを設定する
		@param[in]	TotalTime	トータル時間
		@param[in]	TargetPosition	目的の位置
		@param[in]	Rate = Lerp::Linear	補間方法（デフォルト線形）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& TargetPosition, Lerp::rate Rate = Lerp::Linear);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	パラメータを設定する
		@param[in]	TotalTime	トータル時間
		@param[in]	TargetPosition	目的の位置
		@param[in]	RateX	X方向補間
		@param[in]	RateY	Y方向補間
		@param[in]	RateZ	Z方向補間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& TargetPosition, Lerp::rate RateX, Lerp::rate RateY, Lerp::rate RateZ);
	};

	//--------------------------------------------------------------------------------------
	///	目的の相対位置に移動
	//--------------------------------------------------------------------------------------
	class MoveBy : public  MoveComponent {
		Vector3 m_LocalVector;	//相対方向
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit MoveBy(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~MoveBy();
		//アクセサ
		//--------------------------------------------------------------------------------------
		/*!
		@brief	目的の相対方向を得る
		@return	目的の相対方向
		*/
		//--------------------------------------------------------------------------------------
		const Vector3& GetLocalVector() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	目的の位置を設定する
		@param[in]	LocalVector	相対方向
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalVector(const Vector3& LocalVector);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	目的の相対方向を設定する
		@param[in]	x	方向X
		@param[in]	y	方向Y
		@param[in]	z	方向Z
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLocalVector(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	パラメータを設定する
		@param[in]	TotalTime	トータル時間
		@param[in]	LocalVector	目的の相対方向
		@param[in]	Rate = Lerp::Linear	補間方法（デフォルト線形）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& LocalVector, Lerp::rate Rate = Lerp::Linear);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	パラメータを設定する
		@param[in]	TotalTime	トータル時間
		@param[in]	LocalVector	目的の相対方向
		@param[in]	RateX	X方向補間
		@param[in]	RateY	Y方向補間
		@param[in]	RateZ	Z方向補間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetParams(float TotalTime, const Vector3& LocalVector, Lerp::rate RateX, Lerp::rate RateY, Lerp::rate RateZ);
		//操作
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アクションを実行する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Run()override;
	};





}
//end basecross
