/*!
@file GameObject.h
@brief コンポーネント、ゲームオブジェクト
*/

#pragma once
#include "stdafx.h"

namespace basecross{

	class GameObject;
	class Scene;

	//--------------------------------------------------------------------------------------
	///	コンポーネント親クラス
	//--------------------------------------------------------------------------------------
	class Component : public ObjectInterface, public ShapeInterface{
		weak_ptr<GameObject> m_GameObject;
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit Component(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトデストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Component();
	public:
		//アクセサ
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ゲームオブジェクトの取得
		@return	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<GameObject> GetGameObject() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ゲームオブジェクトを設定する
		@param[in]	GameObjectPtr	新しいゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGameObject(const shared_ptr<GameObject>& GameObjectPtr);
	};

	//--------------------------------------------------------------------------------------
	///	変換コンポーネント
	//--------------------------------------------------------------------------------------
	class Transform : public Component {
		//1つ前の変数
		Vector3 m_BeforeScale;
		Vector3 m_BeforePivot;
		Quaternion m_BeforeQuaternion;
		Vector3 m_BeforePosition;
		//現在の変数
		Vector3 m_Scale;
		Vector3 m_Pivot;
		Quaternion m_Quaternion;
		Vector3 m_Position;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit Transform(const shared_ptr<GameObject>& GameObjectPtr) :
			Component(GameObjectPtr),
			m_BeforeScale(1.0f, 1.0f, 1.0f),
			m_BeforePivot(0, 0, 0),
			m_BeforePosition(0, 0, 0),
			m_Scale(1.0f, 1.0f, 1.0f),
			m_Pivot(0, 0, 0),
			m_Position(0, 0, 0)
		{
			m_BeforeQuaternion.Identity();
			m_Quaternion.Identity();
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Transform(){}
		//アクセサ
		//--------------------------------------------------------------------------------------
		/*!
		@brief	1つ前のスケーリングを得る
		@return	1つ前のスケーリング
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetBeforeScale() const{
			return m_BeforeScale;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	1つ前の重心を得る
		@return	1つ前の重心
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetBeforePivot() const{
			return m_BeforePivot;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	1つ前のワールド回転を得る
		@return	1つ前のワールド回転（クオータニオン）
		*/
		//--------------------------------------------------------------------------------------
		Quaternion GetBeforeQuaternion() const{
			return m_BeforeQuaternion;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	1つ前のワールド位置を得る
		@return	1つ前のワールド位置
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetBeforePosition() const{
			return m_BeforePosition;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	1つ前のワールド行列を得る
		@return	1つ前のワールド行列
		*/
		//--------------------------------------------------------------------------------------
		Matrix4X4 GetBeforeWorldMatrix() const{
			Matrix4X4 mat;
			mat.AffineTransformation(m_BeforeScale, m_BeforePivot, m_BeforeQuaternion, m_BeforePosition);
			return mat;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スケーリングを得る
		@return	スケーリング
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetScale() const{
			return m_Scale;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	スケーリングを設定する.
		@param	Scale	スケーリング
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetScale(const Vector3& Scale){
			m_Scale = Scale;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重心を得る
		@return	重心
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetPivot() const{
			return m_Pivot;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重心を設定する.
		@param	Pivot	重心
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPivot(const Vector3& Pivot){
			m_Pivot = Pivot;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ワールド回転を得る
		@return	ワールド回転（クオータニオン）
		*/
		//--------------------------------------------------------------------------------------
		Quaternion GetQuaternion() const{
			return m_Quaternion;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ワールド回転を設定する
		@param[in]	quaternion	クオータニオン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetQuaternion(const Quaternion& quaternion){
			m_Quaternion = quaternion;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ワールド位置を得る
		@return	ワールド位置
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetPosition() const{
			return m_Position;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ワールド位置を設定する
		@param[in]	Position	設定する位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPosition(const Vector3& Position){
			m_Position = Position;
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	ワールド行列を得る
		@return	ワールド行列
		*/
		//--------------------------------------------------------------------------------------
		Matrix4X4 GetWorldMatrix() const{
			Matrix4X4 mat;
			mat.AffineTransformation(m_Scale, m_Pivot, m_Quaternion, m_Position);
			return mat;
		}


		//操作
		//--------------------------------------------------------------------------------------
		/*!
		@brief	データを1つ前に設定する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetToBefore(){
			m_BeforeScale = m_Scale;
			m_BeforePivot = m_Pivot;
			m_BeforeQuaternion = m_Quaternion;
			m_BeforePosition = m_Position;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化を行う（仮想関数）<br />
		＊thisポインタが必要なオブジェクトはこの関数を多重定義して、取得できる
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate()override{};

		//--------------------------------------------------------------------------------------
		/*!
		@brief	更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override{}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	描画処理。デフォルトは何も行わない
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override {}
	};

	//--------------------------------------------------------------------------------------
	///	重力コンポーネント
	//--------------------------------------------------------------------------------------
	class Gravity : public Component{
		Vector3 m_DefaultGravity;		//自由落下加速度
		Vector3 m_Gravity;				//現在の重力加速度
		Vector3 m_GravityVelocity;		//重力加速度による現在の速度
		float m_BaseY;	//最下落下地点
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	ゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit Gravity(const shared_ptr<GameObject>& GameObjectPtr) :
			Component(GameObjectPtr),
			m_DefaultGravity(0.0f, -9.8f, 0.0f),
			m_Gravity(m_DefaultGravity),
			m_GravityVelocity(0, 0, 0),
			m_BaseY(0)
		{}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Gravity(){}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	自由落下重力を得る
		@return	自由落下重力
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetDefaultGravity() const{
			return m_DefaultGravity;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	自由落下重力を設定する
		@param[in]	gravity	自由落下重力値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetDefaultGravity(const Vector3& gravity){
			m_DefaultGravity = gravity;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力を得る
		@return	現在の重力
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetGravity() const{
			return m_Gravity;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力を設定する
		@param[in]	gravity	重力値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravity(const Vector3& gravity){
			m_Gravity = gravity;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力を0に設定する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityZero(){
			m_Gravity = Vector3(0, 0, 0);
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の重力を自由落下に設定する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityDefault(){
			m_Gravity = m_DefaultGravity;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重力による現在の速度を得る
		@return	重力による現在の速度
		*/
		//--------------------------------------------------------------------------------------
		Vector3 GetGravityVelocity() const{
			return m_GravityVelocity;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重力による現在の速度を設定する（強引に重力による速度を変更する場合に使用）。
		@param[in]	GravityVelocity	重力による現在の速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityVelocity(const Vector3& GravityVelocity){
			m_GravityVelocity = GravityVelocity;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重力による速度が0かどうかを得る
		@return	重力による速度が0かどうか
		*/
		//--------------------------------------------------------------------------------------
		bool IsGravityVelocityZero(){
			return (m_GravityVelocity == Vector3(0, 0, 0));
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重力による速度を0にする
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityVelocityZero(){
			m_GravityVelocity = Vector3(0, 0, 0);

		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オブジェクトの最下地点を得る
		@return	オブジェクトの最下地点
		*/
		//--------------------------------------------------------------------------------------
		float GetBaseY() const{
			return m_BaseY;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	オブジェクトの最下地点を設定する
		@param[in]	y	オブジェクトの最下地点
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetBaseY(float y){
			m_BaseY = y;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ジャンプのスタート
		@param[in]	StartVec	初速度
		@param[in]	EscapeSpan	ジャンプ開始地点への上部調整値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void StartJump(const Vector3& StartVec, float EscapeSpan = 0.0f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定した時間だけ重力をかける
		@param[in]	CalcTime	時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void UpdateFromTime(float CalcTime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化を行う（仮想関数）<br />
		＊thisポインタが必要なオブジェクトはこの関数を多重定義して、取得できる
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate()override{};
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。デフォルトは何も行わない
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override{}
	};

	//--------------------------------------------------------------------------------------
	///	PNTStaticDraw描画コンポーネント
	//--------------------------------------------------------------------------------------
	class PNTStaticDraw : public Component{

		//メッシュリソース
		weak_ptr<MeshResource> m_MeshResource;
		//テクスチャ
		weak_ptr<TextureResource> m_TextureResource;
		bool m_OwnShadowActive;
		bool m_Trace;

		///ルートシグネチャ
		ComPtr<ID3D12RootSignature> m_RootSignature;
		///CbvSrvのデスクプリタハンドルのインクリメントサイズ
		UINT m_CbvSrvDescriptorHandleIncrementSize{ 0 };
		///デスクプリタヒープ
		ComPtr<ID3D12DescriptorHeap> m_CbvSrvUavDescriptorHeap;
		ComPtr<ID3D12DescriptorHeap> m_SamplerDescriptorHeap;
		///GPU側デスクプリタのハンドルの配列
		vector<CD3DX12_GPU_DESCRIPTOR_HANDLE> m_GPUDescriptorHandleVec;
		///コンスタントバッファアップロードヒープ
		ComPtr<ID3D12Resource> m_ConstantBufferUploadHeap;
		//コンスタントバッファ構造体
		struct PNTStaticConstantBuffer
		{
			Matrix4X4 World;
			Matrix4X4 View;
			Matrix4X4 Projection;
			Vector4 LightDir;
			Color4 Emissive;
			Color4 Diffuse;
			PNTStaticConstantBuffer() {
				memset(this, 0, sizeof(PNTStaticConstantBuffer));
			};
		};
		///コンスタントバッファのGPU側変数
		void* m_pConstantBuffer{ nullptr };
		///パイプラインステート
		D3D12_GRAPHICS_PIPELINE_STATE_DESC m_PineLineDesc;

		ComPtr<ID3D12PipelineState> m_CullBackPipelineState;
		ComPtr<ID3D12PipelineState> m_CullFrontPipelineState;
		///コマンドリスト
		ComPtr<ID3D12GraphicsCommandList> m_CommandList;

		///各初期化関数
		///ルートシグネチャ作成
		void CreateRootSignature();
		///デスクプリタヒープ作成
		void CreateDescriptorHeap();
		///サンプラー作成
		void CreateSampler();
		///シェーダーリソースビュー作成
		void CreateShaderResourceView();
		///コンスタントバッファ作成
		void CreateConstantBuffer();
		///パイプラインステート作成
		void CreatePipelineState();
		///コマンドリスト作成
		void CreateCommandList();
		//コンスタントバッファ更新
		void UpdateConstantBuffer(PNTStaticConstantBuffer& Buff);
		///描画処理
		void DrawObject();

		///プロパティ変更
		void RefreshTrace();
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	ゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit PNTStaticDraw(const shared_ptr<GameObject>& GameObjectPtr) :
			Component(GameObjectPtr),
			m_Trace(false)
		{}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PNTStaticDraw(){}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	透明かどうかの設定
		@param[in]	b	透明かどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTrace(bool b);

		//--------------------------------------------------------------------------------------
		/*!
		@brief	メッシュリソースの取得
		@return	メッシュリソース
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<MeshResource> GetMeshResource() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	メッシュリソースの登録
		@param[in]	MeshRes	メッシュリソース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMeshResource(const shared_ptr<MeshResource>& MeshRes);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	テクスチャリソースの設定
		@param[in]	TextureRes	テクスチャリソース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetTextureResource(const shared_ptr<TextureResource>& TextureRes);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	テクスチャリソースの取得
		@return	テクスチャリソース
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<TextureResource> GetTextureResource() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化を行う（仮想関数）<br />
		＊thisポインタが必要なオブジェクトはこの関数を多重定義して、取得できる
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override{}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
	};









	//--------------------------------------------------------------------------------------
	///	ゲームオブジェクトクラス
	//--------------------------------------------------------------------------------------
	class GameObject : public ObjectInterface, public ShapeInterface{
		//シーンのポインタ
		weak_ptr<Scene> m_Scene;
		//コンポーネントのマップ
		map<type_index, shared_ptr<Component> > m_CompMap;
		shared_ptr<Gravity> m_Gravity;	//Gravityは別にする
		shared_ptr<Transform> m_Transform;	//Transformも別にする
		list<type_index> m_CompOrder;	//コンポーネント実行順番
		//コンポーネントを探す
		shared_ptr<Component> SearchComponent(type_index TypeIndex)const;
		//作成したコンポーネントをセットする
		void AddMakedComponent(type_index TypeIndex, const shared_ptr<Component>& Ptr);


	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@param[in]	Scene	シーン
		*/
		//--------------------------------------------------------------------------------------
		explicit GameObject(const shared_ptr<Scene>& ScenePtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトデストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~GameObject();
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	シーンの取得
		@return	シーンのポインタ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<Scene> GetScene()const{
			if (m_Scene.expired()){
				throw BaseException(
					L"シーンが無効です",
					L"if (m_Scene.expired())",
					L"GameObject::GetScene()"
					);
			}
			else{
				return m_Scene.lock();
			}
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンポーネントの取得
		@tparam	T	取得する型
		@param[in]	ExceptionActive	対象がnullだった場合に例外処理するかどうか
		@return	コンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template <typename T>
		shared_ptr<T> GetComponent(bool ExceptionActive = true)const{
			auto Ptr = SearchComponent(type_index(typeid(T)));
			if (Ptr) {
				//指定の型のコンポーネントが見つかった
				auto RetPtr = dynamic_pointer_cast<T>(Ptr);
				if (RetPtr){
					return RetPtr;
				}
				else{
					throw BaseException(
						L"コンポーネントがありましたが、型キャストできません",
						Util::GetWSTypeName<T>(),
						L"GameObject::GetComponent<T>()"
						);
				}
			}
			else{
				if (ExceptionActive){
					throw BaseException(
						L"コンポーネントが見つかりません",
						Util::GetWSTypeName<T>(),
						L"GameObject::GetComponent<T>()"
						);
				}
			}
			return nullptr;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Gravityコンポーネントの取得
		@param[in]	ExceptionActive	対象がnullだった場合に例外処理するかどうか
		@return	コンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template <>
		shared_ptr<Gravity> GetComponent<Gravity>(bool ExceptionActive)const{
			if (!m_Gravity){
				if (ExceptionActive){
					throw BaseException(
						L"コンポーネントが見つかりません",
						L"Gravity",
						L"GameObject::GetComponent<Gravity>()"
						);
				}
				else{
					return nullptr;
				}
			}
			return m_Gravity;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Transformコンポーネントの取得（エラー時は常に例外）
		@return	コンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template <>
		shared_ptr<Transform> GetComponent<Transform>(bool ExceptionActive)const {
			if (!m_Transform) {
				//常に例外
				throw BaseException(
					L"コンポーネントが見つかりません",
					L"Transform",
					L"GameObject::GetComponent<Transform>()"
					);
			}
			return m_Transform;
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンポーネントの追加。新規にコンポーネントクラスを作る場合、コンストラクタの第1引数はGameObjectとして作成する。
		@tparam	T	追加する型
		@tparam	Ts	可変長変数の型
		@param[in]	params	このコンポーネントを構築するのに使用するパラメータ。（第2パラメータ以降）
		@return	コンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template<typename T, typename... Ts>
		shared_ptr<T> AddComponent(Ts&&... params){
			auto Ptr = SearchComponent(type_index(typeid(T)));
			//指定の型のコンポーネントが見つかった
			if (Ptr){
				auto RetPtr = dynamic_pointer_cast<T>(Ptr);
				if (RetPtr){
					return RetPtr;
				}
				else{
					throw BaseException(
						L"すでにコンポーネントがありましたが、型キャストできません",
						Util::GetWSTypeName<T>(),
						L"GameObject::AddComponent<T>()"
						);
				}
			}
			else{
				//見つからない。新たに作成する
				shared_ptr<T> newPtr = ObjectFactory::Create<T>(GetThis<GameObject>(), params...);
				AddMakedComponent(type_index(typeid(T)), newPtr);
				return newPtr;
			}
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Gravityコンポーネントの追加
		@return	コンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template <>
		shared_ptr<Gravity> AddComponent<Gravity>(){
			if (m_Gravity){
				return m_Gravity;
			}
			else{
				//無ければ新たに制作する
				m_Gravity = ObjectFactory::Create<Gravity>(GetThis<GameObject>());
				return m_Gravity;
			}
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	Transformコンポーネントの追加
		@return	コンポーネント
		*/
		//--------------------------------------------------------------------------------------
		template <>
		shared_ptr<Transform> AddComponent<Transform>() {
			if (m_Transform) {
				return m_Transform;
			}
			else {
				//無ければ新たに制作する
				m_Transform = ObjectFactory::Create<Transform>(GetThis<GameObject>());
				return m_Transform;
			}
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンポーネントの準備処理（ターンの先頭に呼ばれる）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ComponentPreparation();

		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンポーネントの更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ComponentUpdate();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンポーネントの描画処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ComponentDraw();

		//--------------------------------------------------------------------------------------
		/*!
		@brief	前初期化
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnPreCreate()override{
			//Transform必須
			AddComponent<Transform>();
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	最終更新（衝突判定などをチェックする）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnLastUpdate(){}


		//--------------------------------------------------------------------------------------
		/*!
		@brief	描画
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override{
			ComponentDraw();
		}

	};




}
// end basecross
