/*!
@file PhysicsManager.h
@brief 物理計算用マネージャなど
@copyright Copyright (c) 2017 WiZ Tamura Hiroki,Yamanoi Yasushi.
*/
#pragma once
#include "stdafx.h"

namespace basecross {

	//--------------------------------------------------------------------------------------
	///	物理計算コンポーネントの親
	//--------------------------------------------------------------------------------------
	class PsBodyComponent : public Component {
		//自動的にTransformコンポーネントを反映するかどうか
		bool m_AutoTransform;
	protected:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit PsBodyComponent(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsBodyComponent();
		//--------------------------------------------------------------------------------------
		/*!
		@brief ワイアフレームの描画
		@param[in]	res	メッシュリソース
		@param[in]	world	ワールド行列
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void DrawShapeWireFrame(const shared_ptr<MeshResource>& res, const bsm::Mat4x4& world);
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief 自動的にTransformを変更するかどうかを得る
		@return	自動的にTransformを変更するかどうか
		*/
		//--------------------------------------------------------------------------------------
		bool IsAutoTransform() const {
			return m_AutoTransform;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 自動的にTransformを変更するかどうかを設定する
		@param[in]	b	自動的にTransformを変更するかどうか
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAutoTransform(bool b) {
			m_AutoTransform = b;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステータスを得る
		@param[out]	st	ステータスを得る参照
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void GetStatus(PsBodyStatus& st) const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を得る
		@return	剛体の位置
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3	GetPosition() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の姿勢を得る
		@return	剛体の姿勢
		*/
		//--------------------------------------------------------------------------------------
		bsm::Quat	GetOrientation() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度を得る
		@return	剛体の速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3	GetLinearVelocity()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度を得る
		@return	剛体の回転速度
		*/
		//--------------------------------------------------------------------------------------
		bsm::Vec3	GetAngularVelocity()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のステータスを設定する
		@param[out]	st	ステータスを得る参照
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetStatus(const PsBodyUpdateStatus& st);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体を起こす（sleepが有効の場合）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void WakeUp();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を設定する
		@param[in]	pos	新しい位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetPosition(const bsm::Vec3& pos);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の位置を設定する
		@param[in]	pos	新しい位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetOrientation(const bsm::Quat& qt);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度を設定する
		@param[in]	v	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetLinearVelocity(const bsm::Vec3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度を設定する
		@param[in]	v	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAngularVelocity(const bsm::Vec3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の速度をtimeStepでposに移動するよう設定する
		@param[in]	pos	移動位置
		@param[in]	timeStep	かかる時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void MovePosition(const bsm::Vec3 &pos, float timeStep);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の回転速度をtimeStepでqtになるよう設定する
		@param[in]	qt	目標の回転
		@param[in]	timeStep	かかる時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void MoveOrientation(const bsm::Quat& qt, float timeStep);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のフォースを追加する
		@param[in]	v	フォース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ApplyForce(const bsm::Vec3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体のトルクを追加する
		@param[in]	v	トルク
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ApplyTorque(const bsm::Vec3& v);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の衝突セルフ衝突フィルターを設定する
		@param[in]	val	値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetContactFilterSelf(uint32_t val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体の衝突ターゲット衝突フィルターを設定する
		@param[in]	val	値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetContactFilterTarget(uint32_t val);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る（純粋仮想関数）
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボディがコンタクト（衝突）している相手の配列(インデックス)を得る
		@param[out]	contacts	相手のIDの配列
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactsVec(vector<uint16_t>& contacts)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボディがコンタクト（衝突）している相手のset集合を得る
		@param[out]	contacts	相手のIDのset集合
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactsSet(set<uint16_t>& contacts)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ボディがコンタクト（衝突）している相手の配列(ゲームオブジェクト)を得る
		@param[out]	objects	相手のゲームオブジェクトの配列
		@return	衝突があればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetContactGameObjects(vector<shared_ptr<GameObject>>& objects)const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief コリジョンとの衝突判定（簡易）
		@param[in]	src	コリジョン球体
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual bool CollisionTestBase(const SPHERE& src) { return false; }
		//--------------------------------------------------------------------------------------
		/*!
		@brief コリジョンとの衝突判定（簡易）
		@param[in]	src	コリジョンカプセル
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual bool CollisionTestBase(const CAPSULE& src) { return false; }
		//--------------------------------------------------------------------------------------
		/*!
		@brief コリジョンとの衝突判定（簡易）
		@param[in]	src	コリジョンOBB
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual bool CollisionTestBase(const OBB& src) { return false; }
		//--------------------------------------------------------------------------------------
		/*!
		@brief コリジョンとの衝突判定（呼び出しテンプレート）
		@tparam	T	コリジョン型
		@param[in]	src	コリジョンOBB
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		template<typename T>
		bool CollisionTest(const T& src) {
			return CollisionTestBase(src);
		}
	};

	//--------------------------------------------------------------------------------------
	///	単体の球体コンポーネント
	//--------------------------------------------------------------------------------------
	class PsSphereBody : public PsBodyComponent {
		//物理計算用のオブジェクト
		shared_ptr<PsSphere> m_PsSphere;
		//ワイフレフレームメッシュ
		shared_ptr<MeshResource> m_SphereMeshRes;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	球体の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsSphereBody(const shared_ptr<GameObject>& GameObjectPtr,const PsSphereParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsSphereBody() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsSphere> GetPsSphere()const {
			return m_PsSphere;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsSphereParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsSphereParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief コリジョンとの衝突判定（簡易）
		@param[in]	src	コリジョン球体
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual bool CollisionTestBase(const SPHERE& src)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
	};

	//--------------------------------------------------------------------------------------
	///	単体のボックスコンポーネント
	//--------------------------------------------------------------------------------------
	class PsBoxBody : public PsBodyComponent {
		//物理計算用のオブジェクト
		shared_ptr<PsBox> m_PsBox;
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsBoxBody(const shared_ptr<GameObject>& GameObjectPtr,const PsBoxParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsBoxBody() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsBox> GetPsBox()const {
			return m_PsBox;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsBoxParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsBoxParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief コリジョンとの衝突判定（簡易）
		@param[in]	src	コリジョン球体
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual bool CollisionTestBase(const SPHERE& src)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;

	};

	//--------------------------------------------------------------------------------------
	///	単体のカプセルコンポーネント
	//--------------------------------------------------------------------------------------
	class PsCapsuleBody : public PsBodyComponent {
		//物理計算用のオブジェクト
		shared_ptr<PsCapsule> m_PsCapsule;
		//ワイアフレーム用メッシュ（カプセルは各コンポーネントが保持）
		shared_ptr<MeshResource> m_CapsuleMesh;
		void CreateMesh(const PsCapsuleParam& param);
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsCapsuleBody(const shared_ptr<GameObject>& GameObjectPtr, const PsCapsuleParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsCapsuleBody() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsCapsule> GetPsCapsule()const {
			return m_PsCapsule;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCapsuleParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsCapsuleParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief コリジョンとの衝突判定（簡易）
		@param[in]	src	コリジョン球体
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual bool CollisionTestBase(const SPHERE& src)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
	};


	//--------------------------------------------------------------------------------------
	///	単体のシリンダーコンポーネント。シリンダーは、ボックスの縁からの落下時に不具合があるので、利用は慎重に！
	//--------------------------------------------------------------------------------------
	class PsCylinderBody : public PsBodyComponent {
		//物理計算用のオブジェクト
		shared_ptr<PsCylinder> m_PsCylinder;
		//ワイアフレーム用メッシュ（シリンダーは各コンポーネントが保持）
		shared_ptr<MeshResource> m_CylinderMesh;
		void CreateMesh(const PsCylinderParam& param);
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsCylinderBody(const shared_ptr<GameObject>& GameObjectPtr, const PsCylinderParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsCylinderBody() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsCylinder> GetPsCylinder()const {
			return m_PsCylinder;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCylinderParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsCylinderParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
	};

	//--------------------------------------------------------------------------------------
	///	単体の凸面コンポーネント
	//--------------------------------------------------------------------------------------
	class PsConvexBody : public PsBodyComponent {
		//物理計算用のオブジェクト
		shared_ptr<PsConvex> m_PsConvex;
		//ワイアフレーム用メッシュ（各コンポーネントが保持）
		shared_ptr<MeshResource> m_ConvexMesh;
		void CreateMesh(const PsConvexParam& param);
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsConvexBody(const shared_ptr<GameObject>& GameObjectPtr, const PsConvexParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsConvexBody() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsConvex> GetPsConvex()const {
			return m_PsConvex;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsConvexParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsConvexParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
	};

	//--------------------------------------------------------------------------------------
	///	プリミティブ合成コンポーネント
	//--------------------------------------------------------------------------------------
	class PsCombinedBody : public PsBodyComponent {
		//物理計算用のオブジェクト
		shared_ptr<PsCombined> m_PsCombined;
		//ワイアフレーム用メッシュの配列（各コンポーネントが保持）
		vector<shared_ptr<MeshResource>> m_CombinedMeshVec;
		void CreateMesh(const PsCombinedParam& param);
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		@param[in]	param	の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		explicit PsCombinedBody(const shared_ptr<GameObject>& GameObjectPtr, const PsCombinedParam& param);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~PsCombinedBody() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	物理オブジェクトを得る
		@return	物理オブジェクト
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<PsCombined> GetPsCombined()const {
			return m_PsCombined;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	剛体インデックスを得る
		@return	剛体インデックス
		*/
		//--------------------------------------------------------------------------------------
		virtual uint16_t GetIndex() const override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在の作成パラメータを得る
		@return	現在の作成パラメータ
		*/
		//--------------------------------------------------------------------------------------
		const PsCombinedParam& GetParam() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	再利用して剛体をリセットする
		@param[in]	param	作成パラメータ
		@param[in]	index	インデックス
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Reset(const PsCombinedParam& param, uint16_t index);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
	};



}
// end basecross

