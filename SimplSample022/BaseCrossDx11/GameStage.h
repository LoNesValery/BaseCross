/*!
@file GameStage.h
@brief ゲームステージ
*/

#pragma once
#include "stdafx.h"

namespace basecross {


	//--------------------------------------------------------------------------------------
	///	コリジョンタイプ
	//--------------------------------------------------------------------------------------
	enum class CollType {
		typeNone,
		typeSPHERE,
		typeCAPSULE,
		typeOBB,
	};

	struct Rigidbody;
	//--------------------------------------------------------------------------------------
	///	衝突情報
	//--------------------------------------------------------------------------------------
	struct CollisionState {
		Rigidbody* m_Src;
		Vec3 m_SrcHitNormal;
		Rigidbody* m_Dest;
		Vec3 m_DestHitNormal;
		float m_HitTime;
	};

	//--------------------------------------------------------------------------------------
	///	剛体
	//--------------------------------------------------------------------------------------
	struct Rigidbody {
		//オーナー
		weak_ptr<GameObject> m_Owner;
		//重力加速度
		Vec3 m_Gravity;
		//質量
		float m_Mass;
		//現在のフォース
		Vec3 m_Force;
		//速度
		Vec3 m_Velocity;
		//コリジョンのタイプ
		CollType m_CollType;
		//Fixedかどうか
		bool m_IsFixed;
		//スケール
		Vec3 m_Scale;
		//回転
		Quat m_Quat;
		//位置
		Vec3 m_Pos;
		//1つ前のスケール
		Vec3 m_BeforeScale;
		//1つ前の回転
		Quat m_BeforeQuat;
		//1つ前の位置
		Vec3 m_BeforePos;
		void SetToBefore() {
			m_BeforeScale = m_Scale;
			m_BeforeQuat = m_Quat;
			m_BeforePos = m_Pos;
		}
		Rigidbody():
			m_Gravity(0, -9.8f, 0),
			m_Mass(0),
			m_Force(0),
			m_Velocity(0),
			m_CollType(CollType::typeNone),
			m_IsFixed(false),
			m_Scale(1.0f),
			m_Quat(),
			m_Pos(0),
			m_BeforeScale(1.0f),
			m_BeforeQuat(),
			m_BeforePos(0)
		{}
		//--------------------------------------------------------------------------------------
		/*!
		@brief SPHEREを得る
		@return	SPHERE
		*/
		//--------------------------------------------------------------------------------------
		SPHERE GetSPHERE()const {
			SPHERE sp;
			sp.m_Center = m_Pos;
			sp.m_Radius = m_Scale.y * 0.5f;
			return sp;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief CAPSULEを得る
		@return	CAPSULE
		*/
		//--------------------------------------------------------------------------------------
		CAPSULE GetCAPSULE()const {
			Mat4x4 mat;
			mat.affineTransformation(m_Scale, Vec3(0, 0, 0),
				m_Quat, m_Pos);
			CAPSULE cap(0.5f, Vec3(0,-0.5f,0), Vec3(0, 0.5f, 0),mat);
			return cap;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief OBBを得る
		@return	OBB
		*/
		//--------------------------------------------------------------------------------------
		OBB GetOBB()const {
			Mat4x4 mat;
			mat.affineTransformation(m_Scale, Vec3(0, 0, 0),
				m_Quat, m_Pos);
			OBB ob(Vec3(1.0f,1.0f,1.0f),mat);
			return ob;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief Velocityに従って、Spantimeだけ位置を変更する
		@param[in]	Spantime	位置変更タイム
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Move(float Spantime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 衝突判定(SrcがSPHERE)
		@param[in]	Dest	相手の参照
		@param[in]	ElapsedTime	ターン時間
		@param[out]	state	衝突ステート
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		bool CollisionSPHERE(Rigidbody& Dest, float ElapsedTime, CollisionState& state);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 衝突判定(SrcがCAPSULE)
		@param[in]	Dest	相手の参照
		@param[in]	ElapsedTime	ターン時間
		@param[out]	state	衝突ステート
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		bool CollisionCAPSULE(Rigidbody& Dest, float ElapsedTime, CollisionState& state);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 衝突判定(SrcがOBB)
		@param[in]	Dest	相手の参照
		@param[in]	ElapsedTime	ターン時間
		@param[out]	state	衝突ステート
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		bool CollisionOBB(Rigidbody& Dest, float ElapsedTime, CollisionState& state);
		//--------------------------------------------------------------------------------------
		/*!
		@brief エスケープ(SrcがSPHERE)
		@param[in]	Dest	相手のポインタ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void EscapeSPHERE(Rigidbody* Dest);
		//--------------------------------------------------------------------------------------
		/*!
		@brief エスケープ(SrcがCAPSULE)
		@param[in]	Dest	相手のポインタ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void EscapeCAPSULE(Rigidbody* Dest);
		//--------------------------------------------------------------------------------------
		/*!
		@brief エスケープ(SrcがOBB)
		@param[in]	Dest	相手のポインタ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void EscapeOBB(Rigidbody* Dest);
	};



	//--------------------------------------------------------------------------------------
	///	Rigidbodyマネージャ
	//--------------------------------------------------------------------------------------
	class RigidbodyManager : public GameObject {
		//Rigidbodyの配列
		vector<Rigidbody> m_RigidbodyVec;
		//衝突判定
		void CollisionDest(Rigidbody& Src);
		bool CollisionStateChk(Rigidbody* p1, Rigidbody* p2);
		bool CollisionTest(Rigidbody& Src, Rigidbody& Dest, CollisionState& state);
		//衝突ステートの配列
		vector<CollisionState> m_CollisionStateVec;
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief コンストラクタ
		@param[in]	StagePtr	ステージのポインタ
		*/
		//--------------------------------------------------------------------------------------
		RigidbodyManager(const shared_ptr<Stage>& StagePtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~RigidbodyManager();
		//--------------------------------------------------------------------------------------
		/*!
		@brief Rigidbodyの配列を得る
		@return	Rigidbodyの配列
		*/
		//--------------------------------------------------------------------------------------
		const vector<Rigidbody>& GetRigidbodyVec()const {
			return m_RigidbodyVec;
		}
		vector<Rigidbody>& GetRigidbodyVec() {
			return m_RigidbodyVec;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 衝突情報の配列を得る
		@return	衝突情報の配列
		*/
		//--------------------------------------------------------------------------------------
		const vector<CollisionState>& GetCollisionStateVec()const {
			return m_CollisionStateVec;
		}
		vector<CollisionState>& GetCollisionStateVec(){
			return m_CollisionStateVec;
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief 指定のオーナーのRigidbodyを得る
		@param[in]	OwnerPtr	オーナーのポインタ
		@return	指定のオーナーのRigidbody
		*/
		//--------------------------------------------------------------------------------------
		Rigidbody& GetOwnRigidbody(const shared_ptr<GameObject>& OwnerPtr) {
			for (auto& v : m_RigidbodyVec) {
				auto shptr = v.m_Owner.lock();
				if (shptr == OwnerPtr) {
					return v;
				}
			}
			throw BaseException(
				L"指定のRigidbodyが見つかりません",
				L"!Rigidbody",
				L"RigidbodyManager::GetOwnRigidbody()"
			);
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate() override {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief フォースを初期化する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void InitRigidbody();
		//--------------------------------------------------------------------------------------
		/*!
		@brief SrcのDestからのエスケープ
		@param[in]	Src		Srcのポインタ
		@param[in]	Dest	Destのポインタ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void Escape(Rigidbody* Src, Rigidbody* Dest);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 最終更新
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate2()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override {}

	};


	//--------------------------------------------------------------------------------------
	///	ゲームステージ
	//--------------------------------------------------------------------------------------
	class GameStage : public Stage {
		Vec4 m_LightDir;		///<ライト向き
		Camera m_Camera;		///<カメラ
		//RigidbodyManager
		shared_ptr<RigidbodyManager> m_RigidbodyManager;
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		GameStage();
		virtual ~GameStage() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief カメラの取得
		@return	カメラの参照（内容変更できない）
		*/
		//--------------------------------------------------------------------------------------
		const Camera& GetCamera()const {
			return m_Camera;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief カメラの取得
		@return	カメラの参照（内容変更できる）
		*/
		//--------------------------------------------------------------------------------------
		Camera& GetCamera(){
			return m_Camera;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief ライト向きの取得
		@param[out]	LightDir	ライト向き受け取る参照
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void GetLightDir(Vec4& LightDir)const {
			LightDir = m_LightDir;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate() override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief ステージ更新（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdateStage() override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief ステージ描画（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDrawStage() override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Rigidbodyマネージャを得る
		@return	Rigidbodyマネージャ
		*/
		//--------------------------------------------------------------------------------------
		shared_ptr<RigidbodyManager> GetRigidbodyManager() const {
			return m_RigidbodyManager;
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief Rigidbodyを登録する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void AddRigidbody(const Rigidbody& body) {
			GetRigidbodyVec().push_back(body);
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief Rigidbodyの配列を得る
		@return	Rigidbodyの配列
		*/
		//--------------------------------------------------------------------------------------
		const vector<Rigidbody>& GetRigidbodyVec()const {
			return m_RigidbodyManager->GetRigidbodyVec();
		}
		vector<Rigidbody>& GetRigidbodyVec() {
			return m_RigidbodyManager->GetRigidbodyVec();
		}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 衝突情報の配列を得る
		@return	衝突情報の配列
		*/
		//--------------------------------------------------------------------------------------
		const vector<CollisionState>& GetCollisionStateVec()const {
			return m_RigidbodyManager->GetCollisionStateVec();
		}
		vector<CollisionState>& GetCollisionStateVec() {
			return m_RigidbodyManager->GetCollisionStateVec();
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief 指定のオーナーのRigidbodyを得る
		@param[in]	OwnerPtr	オーナーのポインタ
		@return	指定のオーナーのRigidbody
		*/
		//--------------------------------------------------------------------------------------
		Rigidbody& GetOwnRigidbody(const shared_ptr<GameObject>& OwnerPtr) {
			return m_RigidbodyManager->GetOwnRigidbody(OwnerPtr);
		}
	};


	//--------------------------------------------------------------------------------------
	///	空のステージ（メッセージのみある）
	//--------------------------------------------------------------------------------------
	class EmptyStage : public Stage {
		shared_ptr<MessageSprite> m_MessageSprite;		///<メッセージを表示するスプライト
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		EmptyStage() {}
		virtual ~EmptyStage() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate() override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief ステージ更新（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdateStage() override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief ステージ描画（純粋仮想関数）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDrawStage() override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override;
	};




}
//end basecross
